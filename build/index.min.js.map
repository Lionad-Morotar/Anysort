{"version":3,"file":"index.min.js","sources":["../../src/utils.ts","../../src/config.ts","../../src/sort.ts","../../src/build-in-plugins.ts","../../src/main.ts"],"sourcesContent":["import type { SortableTypeEnum, SortableValue } from './type'\n\nexport const isDev = () => process.env.NODE_ENV === 'development'\nexport const warn = (msg: String) => isDev() && console.log(`[WARN] ${msg}`)\nexport const strObj = (obj: Object) => JSON.stringify(obj)\n\nexport const isVoid = (x: SortableValue): boolean => x == undefined\nexport const isVoidType = (x: SortableTypeEnum): boolean => x === 'void'\nexport const getType = (x: SortableValue): SortableTypeEnum | string =>\n  isVoid(x) ? 'void' : Object.prototype.toString.call(x).slice(8, -1).toLowerCase()\nexport const isFn = (x: SortableValue): boolean => getType(x) === 'function'\nexport const notNull = (x: any) => !!x\n\n/**\n * @example\n *    1. walk('a.b')({a:{b:3}}) returns 3\n *    2. walk(['a','b'])({a:{b:3}}) returns 3\n */\nexport const walk = (pathsStore: String | String[]) => (x: any) => {\n  const paths = pathsStore instanceof Array\n    ? pathsStore.slice(0, pathsStore.length)\n    : pathsStore.split('.')\n  let val = x\n  let nextPath: string | null = null\n  while (val && paths.length) {\n    nextPath = paths.shift() as string\n    if (!Object.prototype.hasOwnProperty.call(val, nextPath)) {\n      warn(`cant find path \"${JSON.stringify(pathsStore)}\" in ${strObj(x)}, skip by default`)\n    }\n    val = val[nextPath]\n  }\n  return val\n}\n","import type { AnysortConfiguration } from './type'\n\n// global configuration\nconst config: AnysortConfiguration = {\n  delim: '-',\n  patched: '__ANYSORT_PATCHED__',\n  autoWrap: true,\n  autoSort: true,\n  orders: {\n    number: 1,\n    string: 2,\n    symbol: 3,\n    date: 4,\n    object: 5,\n    function: 6,\n    rest: 7,\n    // if no 'void' provided,\n    // undefined value will be ignored in sort,\n    // null value will be treated as normal unrecognized value\n    void: 8\n  }\n}\n\nexport default config\n","import { getType, warn } from './utils'\nimport config from './config'\n\nimport type { SortFn, SortPlugin, SortableValue, SortableTypeEnum, ComparableValue, SortVal } from './type'\nimport type { MappingFn, ResultFn } from './build-in-plugins'\n\n/**\n * get sorting function based on the type of the value\n * @todo refactor x => comparableValue\n * @todo extensible for custom types\n */\nconst getCompareValue: Record<\n  SortableTypeEnum,\n  // TODO fix type\n  // <T extends { new(): T }>(x: T) => ComparableValue\n  (x: any) => ComparableValue\n> = {\n  void: _ => null,\n  number: Number,\n  string: String,\n  symbol: (x: Symbol): string => x.toString(),\n  date: (x: Date): number => +x,\n  function: (x: Function) => x.name,\n  // The priority of true is greater than false\n  boolean: (x: SortableValue): boolean => !x\n}\n\nconst sortBySameType:\n  (type: SortableTypeEnum | string, a: SortableValue, b: SortableValue) => SortVal | undefined =\n  (type, a, b) => {\n    const getValFn = getCompareValue[type]\n    if (getValFn) {\n      const va = getValFn(a)\n      const vb = getValFn(b)\n      // something interesting:\n      // null < null === false\n      // null > null === false\n      return va === vb ? 0 : (va < vb ? -1 : 1)\n    } else {\n      warn(`cant sort ${a} and ${b}，skip by default`)\n    }\n  }\n\nconst sortByDiffType:\n  (oa: number, ob: number) => SortVal =\n  (oa, ob) => {\n    const minus = oa - ob\n    return minus === 0 ? 0 : (minus > 0 ? 1 : -1)\n  }\n\nconst sortByTypeOrder: SortFn =\n  (a: SortableValue, b: SortableValue) => {\n    const typeA = getType(a)\n    const typeB = getType(b)\n    const orders = config.orders\n    const oa = orders[typeA] || orders.rest\n    const ob = orders[typeB] || orders.rest\n    const isSameType = oa === ob\n    const isComparable = oa && ob\n    // console.log('[ANYSORT DEBUG]', typeA, typeB, a, b, oa, ob)\n    if (isComparable) {\n      return isSameType\n        ? sortBySameType(typeA, a, b)\n        : sortByDiffType(oa, ob)\n    } else {\n      warn(`cant sort ${a} and ${b}，skip by default`)\n    }\n  }\n\ntype PLMaping = (map: MappingFn) => (fn: SortFn) => SortFn\ntype PLResult = (change: ResultFn) => (fn: SortFn) => SortFn\n\nconst maping: PLMaping = map => fn => (a, b) => fn(map(a), map(b))\nconst result: PLResult = change => fn => (a, b) => change(fn(a, b) as SortVal)\n\nexport default class Sort {\n  pipeline: (\n    | { _type: 'maping', _value: MappingFn }\n    | { _type: 'result', _value: ResultFn }\n  )[]\n\n  constructor () {\n    this.pipeline = []\n  }\n\n  // TODO multi-arguments\n  register (plugin: SortPlugin, arg: string) {\n    plugin(this, arg)\n  }\n\n  /**\n   * its not same as Array.prototype.map in js,\n   * but more like map value a to value b,\n   * array.sort((a, b) => a - b) then becames:\n   * array.sort((a, b) => map(a) - map(b))\n   */\n  map (_value: MappingFn): Sort {\n    this.pipeline.push({ _value, _type: 'maping' })\n    return this\n  }\n\n  /**\n   * becareful, the result plugin should be\n   * the last one in this.pipeline\n   */\n  result (_value: ResultFn): Sort {\n    this.pipeline.push({ _value, _type: 'result' })\n    return this\n  }\n\n  seal (): SortFn {\n    let targetSortFn = sortByTypeOrder\n    this.pipeline.reverse().map(current => {\n      const { _type, _value } = current\n      if (_type === 'maping') targetSortFn = maping(_value)(targetSortFn)\n      if (_type === 'result') targetSortFn = result(_value)(targetSortFn)\n    })\n    return targetSortFn\n  }\n}\n","import Sort from './sort'\nimport { walk } from './utils'\n\nimport type {\n  SortVal,\n  SortPlugin,\n  ComparableValue,\n  ExtsPluginsLiteralTypes,\n  ExtsPluginsCallMaybeWithArg\n} from './type'\n\n// TODO reduce compiled code size\n// TODO plugin 'remap'\nconst plugins = {\n\n  /* Plugins that change sort argument */\n\n  i: (sort: Sort) => sort.map(x => {\n    if (typeof x === 'string') return x.toLowerCase()\n    else throw new Error('[ANYSORT] \"i\" plugin only works on string')\n  }),\n  is: (sort: Sort, arg: string) => {\n    if (arg !== '') {\n      return sort.map(x => x === arg)\n    } else {\n      throw new Error('[ANYSORT] \"is\" plugin need a string as arg')\n    }\n  },\n  nth: (sort: Sort, arg: string) => {\n    if (arg !== '') {\n      return sort.map(x => {\n        if (x instanceof Array) return x[+arg]\n        if (typeof x === 'string') return x[+arg]\n        else throw new Error('[ANYSORT] \"nth\" plugin only works on string or array')\n      })\n    } else {\n      throw new Error('[ANYSORT] \"nth\" plugin need a string as arg')\n    }\n  },\n  all: (sort: Sort, arg: string) => sort.map(x => {\n    if (arg !== '') {\n      if (x instanceof Array) return x.every(y => String(y) === arg)\n      if (typeof x === 'string') return x === arg\n      else throw new Error('[ANYSORT] \"all\" plugin only works on string or array')\n    } else {\n      throw new Error('[ANYSORT] \"all\" plugin need a string as arg')\n    }\n  }),\n  has: (sort: Sort, arg: string) => sort.map(x => {\n    if (arg !== '') {\n      if (x instanceof Array) return x.some(y => String(y) === arg)\n      if (typeof x === 'string') return x.includes(arg)\n      else throw new Error('[ANYSORT] \"has\" plugin only works on string or array')\n    } else {\n      throw new Error('[ANYSORT] \"has\" plugin need a string as arg')\n    }\n  }),\n  not: (sort: Sort, arg: string) => {\n    if (arg !== '') {\n      return sort.map(x => x !== arg)\n    } else {\n      return sort.map(x => !x)\n    }\n  },\n  len: (sort: Sort, arg: string) => {\n    if (arg !== '') {\n      return sort.map(x => {\n        if (x instanceof Array) return (x.length === +arg)\n        if (typeof x === 'string') return (x.length === +arg)\n        else throw new Error('[ANYSORT] \"len\" plugin only works on string or array')\n      })\n    } else {\n      return sort.map(x => {\n        if (x instanceof Array) return x.length\n        if (typeof x === 'string') return x.length\n        else throw new Error('[ANYSORT] \"len\" plugin only works on string or array')\n      })\n    }\n  },\n  get: (sort: Sort, arg: string) => {\n    if (arg !== '') return sort.map(walk(arg))\n    else throw new Error('[ANYSORT] \"get\" plugin must have a string argument')\n  },\n\n  /* Plugins that change sort order directly */\n\n  reverse: (sort: Sort) => sort.result(res => -res as SortVal),\n  rand: (sort: Sort) => sort.result(_ => Math.random() < 0.5 ? -1 : 1),\n\n  /* Plugins for Proxy API */\n\n  result: (sort: Sort) => sort.result(res => res)\n\n}\n\ntype PluginsLiteralTypes = ExtsPluginsLiteralTypes<typeof plugins>\ntype PluginsCallMaybeWithArg = ExtsPluginsCallMaybeWithArg<typeof plugins>\n// use Exclude<> to delay the type check,\n// which make coding tips in VS Code readable\nexport type PluginNames = Exclude<keyof PluginsLiteralTypes, never>\nexport type PluginNamesWithArgMaybe = Exclude<keyof PluginsCallMaybeWithArg, never>\nexport type PluginNamesWithoutArg = Exclude<PluginNames, PluginNamesWithArgMaybe>\n\ntype Plugins = Readonly<Record<PluginNames, SortPlugin>>\n\nexport type MappingFn = (x: unknown) => ComparableValue\nexport type ResultFn = (x: SortVal) => SortVal\n\nexport default plugins as Plugins\n","import Sort from './sort'\nimport plugins from './build-in-plugins'\nimport config from './config'\nimport { isFn, notNull } from './utils'\n\nimport type { Anysort, SortVal, SortFn, SortStringCMD, SortCMD, SortPlugin } from './type'\nimport type { PluginNames, PluginNamesWithArgMaybe, PluginNamesWithoutArg } from './build-in-plugins'\nimport type { RequiredArguments } from './type-utils'\n\ntype PS1 = PluginNames\ntype PS2 = PluginNamesWithArgMaybe\ntype PS3 = PluginNamesWithoutArg\n\n/**\n * generate SortFn from string command\n * @exam 'date-reverse()' would be a valid command,\n *        it would be split into 'date', 'reverse()'  two plugins\n */\nfunction genSortFnFromStr<\n  PS1 extends PluginNames,\n  PS2 extends PluginNamesWithArgMaybe,\n  PS3 extends PluginNamesWithoutArg,\n  ARR extends unknown[],\n  CMD\n> (ss: SortStringCMD<PS1, PS2, PS3, ARR, CMD>) {\n  const sort = new Sort()\n  ss.split(config.delim)\n    .filter(notNull)\n    .map(action => {\n      // if match with parens, it's a plugin, such as is(a)),\n      // else it's a object path such as 'a.b'\n      const matchRes = action.match(/([^(]+)(\\(([^)]*)\\))?/)\n      if (matchRes) {\n        const [, name, callable, fnArg] = matchRes\n        callable\n          ? sort.register(plugins[name], fnArg)\n          : sort.register(plugins.get, name)\n      } else {\n        throw new Error(`[ANYSORT] illegal command: ${ss}`)\n      }\n    })\n  return sort.seal()\n}\n\ntype AnySortWrapper<ARR> = ARR\n\nfunction wrapperProxy<\n  PS1 extends PluginNames,\n  PS2 extends PluginNamesWithArgMaybe,\n  PS3 extends PluginNamesWithoutArg,\n  ARR extends any[],\n  CMD = ''\n> (arr: ARR): AnySortWrapper<ARR> {\n  if (arr[config.patched]) {\n    throw new Error('[ANYSORT] patched arr cant be wrapped again')\n  }\n  let proxy: AnySortWrapper<ARR> | null = null\n  const pathStore: string[] = []\n  return (proxy = new Proxy(arr, {\n    get (target, prop: string) {\n      if (prop === config.patched) {\n        return true\n      }\n      if (prop === 'apply') {\n        return (...args: SortCMD<PS1, PS2, PS3, ARR, CMD>[]) =>\n          factory(target, ...args as unknown as SortCMD<PluginNames, PluginNamesWithArgMaybe, PluginNamesWithoutArg, ARR, CMD>[])\n      }\n      if (prop === 'sort') {\n        return (arg: SortFn) =>\n          factory(target, arg as unknown as SortCMD<PluginNames, PluginNamesWithArgMaybe, PluginNamesWithoutArg, ARR, CMD>)\n      }\n      if (Object.prototype.hasOwnProperty.call(plugins, prop)) {\n        // TODO check typeof arg\n        return (arg: string = '') => {\n          const cmdName = [pathStore.splice(0, pathStore.length).join('.'), prop].join('-')\n          const cmd = `${cmdName}(${String(arg)})`\n          return factory(target, cmd as unknown as SortCMD<PluginNames, PluginNamesWithArgMaybe, PluginNamesWithoutArg, ARR, CMD>)\n        }\n      }\n      if (prop in target) {\n        return target[prop]\n      }\n      if (prop.includes('_')) {\n        return (arg: string = '') => {\n          const cmdName = [pathStore.splice(0, pathStore.length).join('.'), prop].join('-')\n          const cmd = `${cmdName.replace('_', '()-')}(${String(arg)})`\n          return factory(target, cmd as unknown as SortCMD<PluginNames, PluginNamesWithArgMaybe, PluginNamesWithoutArg, ARR, CMD>)\n        }\n      }\n      pathStore.push(prop)\n      return proxy\n    }\n  }) as unknown as AnySortWrapper<ARR>)\n}\n\n/**\n * main\n * @exam 3 ways to use anysort\n *       1. anysort(arr: any[], args: SortCMD[]) => any[];\n *       2. anysort(arr: any[], ...args: SortCMD[]) => any[];\n *       3. anysort(arr: any[]) => any[]\n */\nfunction genFactory<\n  PS1 extends PluginNames,\n  PS2 extends PluginNamesWithArgMaybe,\n  PS3 extends PluginNamesWithoutArg,\n> () {\n  const factory = <ARR extends unknown[], CMD> (arr: ARR, ...cmds: SortCMD<PS1, PS2, PS3, ARR, CMD>[]): ARR => {\n    const filteredCMDs = cmds\n      .reduce((h, c) => (h.concat(c)), <SortCMD<PS1, PS2, PS3, ARR, CMD>[]>[])\n      .filter(Boolean)\n\n    const isEmptyCMDs = filteredCMDs.length === 0\n    if (isEmptyCMDs && !config.autoSort) {\n      if (config.autoWrap) {\n        return wrapperProxy<PS1, PS2, PS3, ARR, CMD>(arr)\n      } else {\n        return arr\n      }\n    }\n\n    const sortFns = isEmptyCMDs\n      ? [new Sort().seal()]\n      : filteredCMDs.map((x: SortCMD<PS1, PS2, PS3, ARR, CMD>, i: number) => {\n        try {\n          return isFn(x) ? <SortFn>x : genSortFnFromStr<PS1, PS2, PS3, ARR, CMD>(<SortStringCMD<PS1, PS2, PS3, ARR, CMD>>x)\n        } catch (err) {\n          throw new Error(`[ERR] Error on generate sort function, Index ${i + 1}th: ${x}, error: ${err}`)\n        }\n      })\n\n    const flat:\n      (fns: SortFn[]) => SortFn =\n      fns => (a, b) => fns.reduce((sortResult: SortVal, fn: SortFn) => (sortResult || fn(a, b)) as SortVal, 0)\n    const flattenCMDs = flat(sortFns)\n\n    type NormalSort = (a: any, b: any) => number\n    let result = arr.sort(flattenCMDs as NormalSort)\n    if (config.autoWrap) {\n      if (!result[config.patched]) {\n        result = wrapperProxy(result)\n      }\n    }\n\n    return result\n  }\n  return factory as Anysort<PS1, PS2, PS3>\n}\nconst factory = genFactory<PS1, PS2, PS3>()\n\n// install plugins\nconst extendPlugs = <PluginName extends string>(exts: Record<PluginName, SortPlugin>) => {\n  type ExtsPluginsLiteralTypes = { [K in keyof typeof exts]: typeof exts[K] }\n  type ExtsPluginsCallMaybeWithArg = { [K in keyof ExtsPluginsLiteralTypes as RequiredArguments<ExtsPluginsLiteralTypes[K]> extends (_: any) => any ? never : K]: any }\n  type ExtsPluginNames = Exclude<keyof typeof exts, never>\n  type ExtsPluginNamesWithArgMaybe = Exclude<keyof ExtsPluginsCallMaybeWithArg, never>\n  type ExtsPluginNamesWithoutArg = Exclude<ExtsPluginNames, ExtsPluginNamesWithArgMaybe>\n  type ExtendedAnysort = Anysort<PS1 | ExtsPluginNames, PS2 | ExtsPluginNamesWithArgMaybe, PS3 | ExtsPluginNamesWithoutArg>\n\n  Object.entries(exts).map(([k, v]) => plugins[k] = v)\n  return factory as ExtendedAnysort\n}\n\n/**\n * Module Exports\n */\n;(factory as Anysort<PS1, PS2, PS3>).extends = extendPlugs\n;(factory as Anysort<PS1, PS2, PS3>).wrap = arr => wrapperProxy(arr)\n;(factory as Anysort<PS1, PS2, PS3>).config = config\n\nexport default factory as Anysort<PS1, PS2, PS3>\n"],"names":[],"mappings":"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"}